version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1.0
  slack: circleci/slack@5.0.0

executors:
  basic-executor:
    docker:
      - image: cimg/base:2021.04
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.3.0
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
          TZ: Europe/London
  linting-executor:
    docker:
      - image: cimg/ruby:3.4.4-node
        environment:
          RAILS_ENV: test
          TZ: "Europe/London"
  test-executor:
    docker:
      - image: cimg/ruby:3.4.4-node
        environment:
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: user
          TZ: "Europe/London"
      - image: cimg/redis:6.2
      - image: cimg/postgres:17.4
        environment:
          POSTGRES_USER: user
          POSTGRES_DB: laa_hmrc_interface_service_api_test

references:
  authenticate_k8s_live: &authenticate_k8s_live
    run:
      name: Authenticate with Live cluster
      command: |
        echo -n ${K8S_CLUSTER_CERT_LIVE} | base64 -d > ./ca.crt
        kubectl config set-cluster ${K8S_CLUSTER_NAME_LIVE} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME_LIVE}
        kubectl config set-credentials circleci --token=${K8S_TOKEN_LIVE}
        kubectl config set-context ${K8S_CLUSTER_NAME_LIVE} --cluster=${K8S_CLUSTER_NAME_LIVE} --user=circleci --namespace=${K8S_NAMESPACE}
        kubectl config use-context ${K8S_CLUSTER_NAME_LIVE}
  restore_gems_cache: &restore_gems_cache
    restore_cache:
      keys:
        - laa-hmrc-interface-{{ checksum "Gemfile.lock" }}-v3.4.4
  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        gem install bundler -v 2.6.9
        bundle install --path=vendor/bundle --jobs=4 && bundle clean
  save_gems_cache: &save_gems_cache
    save_cache:
      key: laa-hmrc-interface-{{ checksum "Gemfile.lock" }}-v3.4.4
      paths:
        - vendor/bundle
  install_packages_for_testing: &install_packages_for_testing
    run:
      name: Install System packages needed for testing
      command: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
  setup_database: &setup_database
    run:
      name: Database Setup
      command: bundle exec rails db:prepare

commands:
  build-and-push-to-ecr:
    description: Build and push image to ECR repository
    steps:
      - run:
          name: Build docker image
          command: |
            docker build \
            --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
            --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
            --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
            -t app .
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - run:
          name: Push image to ECR repository
          command: |
            aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${ECR_REGISTRY}
            docker tag app "${ECR_REGISTRY}/${ECR_REPOSITORY}:${CIRCLE_SHA1}"
            docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${CIRCLE_SHA1}"

            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              docker tag app "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
              docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
            fi

  run-smoke-test:
    parameters:
      use_case:
        type: string
        default: expect_fail
    steps:
      - run: ./bin/smoke_tests << parameters.use_case >>

jobs:
  lint_checks:
    executor: linting-executor
    steps:
      - checkout
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - run:
          name: Run Rubocop
          command: bundle exec rubocop
  unit_tests:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *setup_database
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - run:
          name: Run ruby tests
          command: |
            bundle exec rspec
#            ./tmp/cc-test-reporter before-build
#            bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec/rspec.xml
#            ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/coverage/codeclimate.json
#            ./tmp/cc-test-reporter upload-coverage -i tmp/coverage/codeclimate.json
      - store_test_results:
          path: /tmp/test-results/rspec
      - store_artifacts:
          path: ./coverage
  smoke_tests:
    executor: basic-executor
    parameters:
      use_case:
        type: string
        default: set_in_workflow
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run-smoke-test:
          use_case: << parameters.use_case >>
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":nope-9607: Smoke test of use case << parameters.use_case >> on sandbox failed!"
                  }
                }
              ]
            }

  build_and_push:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - build-and-push-to-ecr
  deploy_uat: &deploy_uat
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s_live
      - run:
          name: Helm deployment to UAT
          command: ./bin/uat_deploy
  deploy_main_uat:
    <<: *deploy_uat
  deploy_staging:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s_live
      - run:
          name: Helm deployment to staging
          command: |
            helm upgrade laa-hmrc-interface ./deploy/helm/. \
                          --install --wait \
                          --namespace=${K8S_NAMESPACE} \
                          --values ./deploy/helm/values-staging.yaml \
                          --set image.repository="${ECR_REGISTRY}/${ECR_REPOSITORY}" \
                          --set image.tag="${CIRCLE_SHA1}"
  deploy_production:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s_live
      - run:
          name: Helm deployment to production
          command: |
            helm upgrade laa-hmrc-interface ./deploy/helm/. \
                        --install --wait \
                        --namespace=${K8S_NAMESPACE} \
                        --values ./deploy/helm/values-production.yaml \
                        --set image.repository="${ECR_REGISTRY}/${ECR_REPOSITORY}" \
                        --set image.tag="${CIRCLE_SHA1}"
  delete_dependabot_deployment:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - *authenticate_k8s_live
      - run:
          name: Delete dependabot deployment
          command: |
            ./bin/delete_dependabot_deployment

generic-slack-fail-post-step: &generic-slack-fail-post-step
  post-steps:
    - slack/notify:
        event: fail
        template: basic_fail_1

workflows:
  open_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              ignore: main
          <<: *generic-slack-fail-post-step
      - unit_tests:
          filters:
            branches:
              ignore: main
          <<: *generic-slack-fail-post-step
      - build_and_push:
          filters:
            branches:
              ignore: main
          <<: *generic-slack-fail-post-step
      - deploy_uat:
          context: laa-hmrc-interface-uat
          requires:
            - lint_checks
            - unit_tests
            - build_and_push
          <<: *generic-slack-fail-post-step

  merge_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              only: main
          <<: *generic-slack-fail-post-step
      - unit_tests:
          filters:
            branches:
              only: main
          <<: *generic-slack-fail-post-step
      - build_and_push:
          requires:
            - lint_checks
            - unit_tests
          <<: *generic-slack-fail-post-step
      - deploy_main_uat:
          context: laa-hmrc-interface-uat
          requires:
            - build_and_push
          <<: *generic-slack-fail-post-step
      - deploy_staging:
          context: laa-hmrc-interface-staging
          requires:
            - build_and_push
          <<: *generic-slack-fail-post-step
      - slack/on-hold:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": ":circleci: $CIRCLE_USERNAME has a pending production approval for $CIRCLE_BRANCH"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Pull Request*: $CIRCLE_PULL_REQUEST"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
                    }
                  ]
                }
              ]
            }
          requires:
            - deploy_main_uat
            - deploy_staging
      - hold_production:
          type: approval
          requires:
            - deploy_main_uat
            - deploy_staging
      - deploy_production:
          context: laa-hmrc-interface-production
          requires:
            - hold_production
          <<: *generic-slack-fail-post-step
  smoke-tests:
    triggers:
      - schedule:
          cron: "30 7 * * 1-5" # 1-5 is Mon-Fri
          filters:
            branches:
              only: main
    jobs:
      - smoke_tests:
          name: smoke-test-one
          use_case: one
          context: laa-hmrc-interface-uat
      - smoke_tests:
          name: smoke-test-two
          use_case: two
          context: laa-hmrc-interface-uat
      - smoke_tests:
          name: smoke-test-three
          use_case: three
          context: laa-hmrc-interface-uat
      - smoke_tests:
          name: smoke-test-four
          use_case: four
          context: laa-hmrc-interface-uat
