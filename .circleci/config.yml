version: 2.1

orbs:
  slack: circleci/slack@3.4.2
executors:
  basic-executor:
    docker:
      - image: cimg/base:2020.01
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:1.41
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
  linting-executor:
    docker:
      - image: circleci/ruby:3.0.1-node-browsers
        environment:
          - RAILS_ENV=test
          - TZ: "Europe/London"
  test-executor:
    docker:
      - image: circleci/ruby:3.0.1-node-browsers
        environment:
          - RAILS_ENV=test
          - PGHOST=localhost
          - PGUSER=user
          - TZ: "Europe/London"
      - image: circleci/redis:5.0
      - image: postgres:10.5
        environment:
          - POSTGRES_USER=user
          - POSTGRES_DB=laa_hmrc_interface_service_api_test
  notification-executor:
    docker:
      - image: 'cibuilds/base:latest'
        environment:
          TERM: dumb
    resource_class: small
references:
  build_docker_image: &build_docker_image
    run:
      name: Build docker image
      command: |
        $(aws ecr get-login --no-include-email)
        docker build \
        --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
        --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
        --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
        -t app .
  push_to_ecr: &push_to_ecr
    run:
      name: Push image to ecr repo
      command: |
        docker tag app "${ECR_ENDPOINT}/laa-apply-for-legal-aid/laa-hmrc-interface-uat-ecr:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/laa-apply-for-legal-aid/laa-hmrc-interface-uat-ecr:${CIRCLE_SHA1}"

        if [ "${CIRCLE_BRANCH}" == "main" ]; then
          docker tag app "${ECR_ENDPOINT}/laa-apply-for-legal-aid/laa-hmrc-interface-uat-ecr:latest"
          docker push "${ECR_ENDPOINT}/laa-apply-for-legal-aid/laa-hmrc-interface-uat-ecr:latest"
        fi
  authenticate_k8s: &authenticate_k8s
    run:
      name: Authenticate with cluster
      command: |
        echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
        kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://api.${K8S_CLUSTER_NAME}
        kubectl config set-credentials circleci --token=${K8S_TOKEN}
        kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
        kubectl config use-context ${K8S_CLUSTER_NAME}
  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key
  restore_gems_cache: &restore_gems_cache
    restore_cache:
      keys:
        - laa-hmrc-interface-{{ checksum "Gemfile.lock" }}
        - laa-hmrc-interface
  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        gem install bundler -v 2.2.15
        bundle install --path=vendor/bundle --jobs=4 && bundle clean
  save_gems_cache: &save_gems_cache
    save_cache:
      key: laa-hmrc-interface-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  install_packages_for_testing: &install_packages_for_testing
    run:
      name: Install System packages needed for testing
      command: sudo apt-get install -y postgresql-client
  setup_database: &setup_database
    run:
      name: Database Setup
      command: |
        bundle exec rake db:create db:schema:load
        bundle exec rake db:migrate

#commands:
#  hold-notification:
#    description: Notify Slack about an awaiting approval job
#    parameters:
#      message:
#        default: "$CIRCLE_USERNAME has a pending approval for $CIRCLE_BRANCH"
#        description: A workflow in CircleCI is awaiting approval.
#        type: string
#      url:
#        default: 'https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}'
#        description: The URL to link back to.
#        type: string
#      webhook:
#        default: '${SLACK_WEBHOOK}'
#        description: >-
#          Enter either your Webhook value or use the CircleCI UI to add your token
#          under the 'SLACK_WEBHOOK' env var
#        type: string
#    steps:
#      - slack/approval:
#          message: << parameters.message >>
#          webhook: << parameters.webhook >>
jobs:
  lint_checks:
    executor: linting-executor
    steps:
      - checkout
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - run:
          name: Run Rubocop
          command:  bundle exec rubocop
  unit_tests:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *setup_database
      - run:
          name: Run ruby tests
          command: bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec/rspec.xml
      - store_test_results:
          path: /tmp/test-results/rspec
      - store_artifacts:
          path: ./coverage
  smoke_tests:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *decrypt_secrets
      - *authenticate_k8s
      - run:
          name: Run curl
          command: ./bin/smoke_tests
  clean_up_ecr:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Delete old images from ecr repo
          command: |
            ./bin/delete_ecr_images
  build_and_push:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - *decrypt_secrets
      - *build_docker_image
      - *push_to_ecr
  deploy_uat: &deploy_uat
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *decrypt_secrets
      - *authenticate_k8s
      - deploy:
          name: Helm deployment to UAT
          command: ./bin/uat_deploy
  deploy_main_uat:
    <<: *deploy_uat
  delete_uat_branch:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - *authenticate_k8s
      - run:
          name: Setup gems required
          command: gem install rest-client
      - run:
          name: Delete UAT release
          command: ./bin/uat_delete_release NOT_A_DRY_RUN
  delete_uat_db:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - *authenticate_k8s
      - run:
          name: Set up port-forward-pod
          command: ./bin/uat_delete_db_setup
      - run:
          name: Start port forwarding
          command: kubectl -n "${K8S_NAMESPACE}" port-forward port-forward-pod 5432:5432
          background: true
      - run:
          name: Delete UAT database
          command: ./bin/uat_delete_db
#  deploy_staging:
#    executor: cloud-platform-executor
#    steps:
#      - checkout
#      - setup_remote_docker:
#          docker_layer_caching: true
#      - *decrypt_secrets
#      - *authenticate_k8s
#      - deploy:
#          name: Helm deployment to staging
#          command: |
#            helm upgrade laa-hmrc-interface ./deploy/helm/. \
#                          --install --wait \
#                          --namespace=${K8S_NAMESPACE} \
#                          --values ./deploy/helm/values-staging.yaml \
#                          --set image.repository="$ECR_ENDPOINT/laa-apply-for-legal-aid/laa-hmrc-interface-uat-ecr" \
#                          --set image.tag="${CIRCLE_SHA1}"
#  hold_production_notification:
#    executor: notification-executor
#    steps:
#      - hold-notification:
#          message: "$CIRCLE_USERNAME has a pending Legal Framework API production approval for $CIRCLE_BRANCH"
#  deploy_production:
#    executor: cloud-platform-executor
#    steps:
#      - checkout
#      - setup_remote_docker:
#          docker_layer_caching: true
#      - *decrypt_secrets
#      - *authenticate_k8s
#      - deploy:
#          name: Helm deployment to production
#          command: |
#            helm upgrade laa-hmrc-interface ./deploy/helm/. \
#                        --install --wait \
#                        --namespace=${K8S_NAMESPACE} \
#                        --values ./deploy/helm/values-production.yaml \
#                        --set image.repository="$ECR_ENDPOINT/laa-apply-for-legal-aid/laa-hmrc-interface-uat-ecr" \
#                        --set image.tag="${CIRCLE_SHA1}"

workflows:
  new_pull_request:
    jobs:
      - smoke_tests:
          context: laa-hmrc-interface-uat
      - lint_checks:
          filters:
            branches:
              ignore: main
      - unit_tests:
          filters:
            branches:
              ignore: main
      - build_and_push:
          filters:
            branches:
              ignore: main
      - deploy_uat:
          context: laa-hmrc-interface-uat
          requires:
            - lint_checks
            - unit_tests
            - build_and_push

  merge_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              only: main
      - unit_tests:
          filters:
            branches:
              only: main
      - build_and_push:
          requires:
            - lint_checks
            - unit_tests
      - deploy_main_uat:
          context: laa-hmrc-interface-uat
          requires:
            - build_and_push
      - delete_uat_branch:
          context: laa-hmrc-interface-uat
          requires:
            - deploy_main_uat
      - delete_uat_db:
          context: laa-hmrc-interface-uat
          requires:
            - delete_uat_branch
#      - deploy_staging:
#          context: laa-hmrc-interface-staging
#          requires:
#            - delete_uat_db
#      - hold_production_notification:
#          requires:
#            - deploy_staging
#      - hold_production:
#          type: approval
#          requires:
#            - deploy_staging
#      - deploy_production:
#          context: laa-hmrc-interface-production
#          requires:
#            - hold_production

  smoke-test:
    triggers:
      - schedule:
          cron: "30 8 * * *"
          filters:
            branches:
              only: main
    jobs:
      - smoke_tests

  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only: main
    jobs:
      - clean_up_ecr
